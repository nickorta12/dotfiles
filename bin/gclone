#!/usr/bin/env python3
import argparse
import json
import os
import requests
import subprocess
import sys
from typing import Dict
from urllib.parse import urlparse

EXTREPO_DIR = os.path.expanduser("~/extgit")
REPOS_DIR = os.path.expanduser("~/repos")


class GcloneError(Exception):
    pass


def validate(url):
    parse_result = urlparse(url)
    host = parse_result.netloc
    scheme = parse_result.scheme
    path = parse_result.path

    if path[-1] == "/":
        path = path[:-1]

    if host == "" and scheme == "":
        host = "github.com"
        if path[0] != "/":
            path = "/" + path

    if host == "":
        raise GcloneError(f"Invalid url: {url}")
    # if host != "github.com":
    #     raise GcloneError(f"Invalid host: {host}")
    if scheme == "":
        scheme = "https"

    url = f"{scheme}://{host}{path}"
    parts = path.split("/")

    try:
        repo = parts[-1]
        parent = parts[-2]
    except:
        raise GcloneError(f"Invalid repo url path: {path}")

    return url, host, parent, repo


def size(parent, repo):
    process = subprocess.Popen(
        ["hub", "api", f"/repos/{parent}/{repo}"],
        text=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
    )
    stdout, _ = process.communicate()
    if process.returncode != 0:
        raise GcloneError(f"hub api error: {stdout}")

    repodata: dict = json.loads(stdout)
    size = repodata["size"]
    mb_size = size / 1024
    print(f"Size of {parent}/{repo}: {mb_size:.02f}MB")


def get_github_lang(parent, repo):
    process = subprocess.Popen(
        ["hub", "api", f"/repos/{parent}/{repo}/languages"],
        text=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
    )
    stdout, _ = process.communicate()
    if process.returncode != 0:
        raise GcloneError(f"hub api error: {stdout}")

    langdata: Dict[str, int] = json.loads(stdout)
    l = list(langdata.items())
    l.sort(key=lambda x: x[1], reverse=True)
    try:
        primary_lang = l[0][0]
    except IndexError:
        primary_lang = "other"
    return primary_lang


def get_gitlab_lang(parent, repo, host):
    langs = requests.get(
        f"https://{host}/api/v4/projects/{parent}%2F{repo}/languages"
    ).json()
    highest_key = ""
    highest_val = 0
    for key, val in langs.items():
        if val > highest_val:
            highest_key = key
            highest_val = val

    return highest_key


def get_other_lang(fullpath):
    print("Running github-linguist, this will take a while")
    # process = subprocess.Popen(
        # "github-linguist",
        # text=True,
        # cwd=fullpath,
        # stdout=subprocess.PIPE,
        # stderr=subprocess.PIPE,
    # )
    process = subprocess.Popen(
        "cloc-lang",
        text=True,
        cwd=fullpath,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    stdout, stderr = process.communicate()
    if process.returncode != 0:
        raise GcloneError(f"github-linguist error: {stderr}")
    # return stdout.splitlines()[0].split()[1]
    return stdout.strip()


def handle_link(primary_lang, parent, repo, fullpath):
    primary_lang = primary_lang.lower().replace(" ", "_").replace("#", "sharp")
    langpath = os.path.join(REPOS_DIR, primary_lang)
    langfullpath = os.path.join(langpath, repo)

    if os.path.exists(langfullpath):
        if os.readlink(langfullpath) == fullpath:
            raise GcloneError(f"Link already exists for {langfullpath}")
        langfullpath_old = langfullpath
        langfullpath = os.path.join(langpath, f"{parent}-{repo}")
        if os.path.exists(langfullpath):
            raise GcloneError(
                f"Link already exists for {langfullpath_old} and {langfullpath}"
            )
        print(f"{langfullpath_old} exists, creating at {langfullpath}")

    create_link = True
    if os.path.islink(langfullpath):
        target = os.path.realpath(langfullpath)
        if target != fullpath:
            raise GcloneError(
                f"Symlink at {langfullpath} incorrectly points to {target}"
            )
        create_link = False

    os.makedirs(langpath, exist_ok=True)
    return create_link, langfullpath


def run(url, host, parent, repo, gitargs, user_create_link, dest_name):
    primary_lang = None
    create_link = None
    langfullpath = None
    parentpath = os.path.join(EXTREPO_DIR, host, parent)
    fullpath = os.path.join(parentpath, repo)
    if os.path.exists(fullpath):
        if os.path.isfile(fullpath):
            raise GcloneError(f"File at location {fullpath}")
        if os.listdir(fullpath):
            raise GcloneError(f"Repo already exists: {fullpath}")

    if user_create_link:
        # handle link for early fails with github and/or gitlab
        if host == "github.com":
            primary_lang = get_github_lang(parent, repo)
        elif "gitlab" in host:
            primary_lang = get_gitlab_lang(parent, repo, host)
        if primary_lang is not None:
            create_link, langfullpath = handle_link(
                primary_lang, parent, dest_name, fullpath
            )

    os.makedirs(parentpath, exist_ok=True)

    cmd = ["git", "clone", url]
    cmd.extend(gitargs)
    process = subprocess.Popen(cmd, cwd=parentpath)
    if process.wait() != 0:
        sys.stderr.flush()
        raise GcloneError(f"git clone error")

    if user_create_link:
        if primary_lang is None:
            primary_lang = get_other_lang(fullpath)
            create_link, langfullpath = handle_link(
                primary_lang, parent, repo, fullpath
            )

        if create_link and langfullpath is not None:
            print(f"Creating link to '{fullpath}' repo at '{langfullpath}'")
            os.symlink(fullpath, langfullpath)
        else:
            print(f"Link to '{fullpath}' already exists at '{langfullpath}'")


def main():
    parser = argparse.ArgumentParser(
        "gclone", description="Clone git repo into ~/extgit/$HOST/"
    )
    parser.add_argument("url", help="Git repo url")
    parser.add_argument(
        "-s",
        "--size",
        help="Just print size of repo in MB, only for github",
        action="store_true",
    )
    parser.add_argument(
        "-n", "--no-link", help="Don't make symlink in ~/repos", action="store_false"
    )
    parser.add_argument("--name", help="New name to store under in link")
    parser.add_argument(
        "gitargs", help="Arguments to pass to git clone", nargs=argparse.REMAINDER
    )
    args = parser.parse_args()
    url = args.url
    gitargs = args.gitargs

    try:
        url, host, parent, repo = validate(url)
        if args.name is not None:
            name = args.name
        else:
            name = repo

        if args.size:
            if host != "github.com":
                raise GcloneError(
                    "Size only works for github repos cause I'm too lazy to figure out others"
                )
            size(parent, repo)
        else:
            run(url, host, parent, repo, gitargs, args.no_link, name)

    except GcloneError as e:
        parser.error(str(e))


if __name__ == "__main__":
    main()
